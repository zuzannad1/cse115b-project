package com.https;

import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.Callback;
import com.facebook.react.bridge.ReadableArray;
import com.facebook.react.modules.core.DeviceEventManagerModule;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ClientConnectionManager;
import org.apache.http.conn.scheme.PlainSocketFactory;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.scheme.SchemeRegistry;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.protocol.HTTP;
import org.apache.http.util.EntityUtils;
import org.apache.http.util.TextUtils;

public class HttpsModule extends ReactContextBaseJavaModule{

    private static final String TAG = "HttpsModule";
	private ReactApplicationContext _reactContext;
	
    public HttpsModule(ReactApplicationContext reactContext) {
        super(reactContext);
		_reactContext = reactContext;
    }

    @Override
    public String getName() {
        return "HttpsModule";
    }

    @ReactMethod
    public void post(){
    	new Thread() {
			public void run() {
//				HttpClient httpClient = new DefaultHttpClient();
				int timeOut = 30 * 1000;
				HttpParams param = new BasicHttpParams();
				HttpConnectionParams.setConnectionTimeout(param, timeOut);
				HttpConnectionParams.setSoTimeout(param, timeOut);
				HttpConnectionParams.setTcpNoDelay(param, true);
				SchemeRegistry registry = new SchemeRegistry();
				registry.register(new Scheme("http", PlainSocketFactory
						.getSocketFactory(), 80));
				registry.register(new Scheme("https", TrustAllSSLSocketFactory
						.getDefault(), 443));
				ClientConnectionManager manager = new ThreadSafeClientConnManager(
						param, registry);
				DefaultHttpClient httpClient = new DefaultHttpClient(manager,
						param);
				HttpPost httpPost = new HttpPost(uri);
				List<NameValuePair> params = new ArrayList<NameValuePair>();
				params.add(new BasicNameValuePair("page", ""));
				params.add(new BasicNameValuePair("q", search));
				HttpResponse httpResponse = null;
				try {
					httpPost.setHeader("User-Agent", "mip_app");
					httpPost.setEntity(new UrlEncodedFormEntity(params,
							HTTP.UTF_8));
					httpResponse = httpClient.execute(httpPost);
					if (httpResponse.getStatusLine().getStatusCode() == 200) {
						result = EntityUtils.toString(httpResponse.getEntity());
						sendEvent("getRes",result);
					}
				} catch (ClientProtocolException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
			};
		}.start();
    } 
	
	private void sendEvent(String eventName,String returnMsg){
        _reactContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
        .emit(eventName, returnMsg);
	}

}
